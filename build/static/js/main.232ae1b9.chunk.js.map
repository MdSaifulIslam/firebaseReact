{"version":3,"sources":["firebase.js","form.js","todo.js","todoList.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Form","useState","title","setTitle","type","onChange","e","target","value","console","log","placeholder","onClick","firebaseRef","database","ref","todo","completed","push","Todo","className","child","id","remove","update","TitleList","titleList","setTitleList","useEffect","on","snapshot","titles","val","titleArray","map","index","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uRAaEA,IAASC,cAXY,CACnBC,OAAQ,0CACRC,WAAY,uCACZC,YAAa,8CACbC,UAAW,uBACXC,cAAe,mCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAKFT,QAAf,ECZa,SAASU,IAAO,IAAD,EAECC,mBAAS,IAFV,mBAEnBC,EAFmB,KAEZC,EAFY,KAsB1B,OACI,6BACI,2BAAOC,KAAK,OAAOC,SApBJ,SAACC,GACpBH,EAASG,EAAEC,OAAOC,OAClBC,QAAQC,IAAIJ,EAAEC,SAkBmCC,MAAON,EACpDS,YAAY,cACZ,4BAAQC,QAjBA,WACZ,IAAMC,EAAcvB,EAASwB,WAAWC,IAAI,cACtCC,EAAO,CACTd,MAAOA,EACPe,WAAW,GAIfJ,EAAYK,KAAKF,GAEjBP,QAAQC,IAAIM,KAOR,a,YCzBG,SAASG,EAAKH,GACzBP,QAAQC,IAAIM,EAAKA,KAAKC,WAmBtB,OACI,6BACI,wBAAIG,UAAWJ,EAAKA,KAAKC,UAAW,WAAY,IAAMD,EAAKA,KAAKd,OAChE,4BAAQU,QApBG,WACCtB,EAASwB,WAAWC,IAAI,cACvCM,MAAML,EAAKA,KAAKM,IAETC,WAgBJ,UACA,4BAAQX,QAbG,WACfH,QAAQC,IAAIM,EAAKA,KAAKC,WACN3B,EAASwB,WAAWC,IAAI,cACvCM,MAAML,EAAKA,KAAKM,IAETE,OAAO,CACXP,WAAcD,EAAKA,KAAKC,cAOxB,cCvBG,SAASQ,IAAY,IAAD,EACExB,qBADF,mBACxByB,EADwB,KACbC,EADa,KAmB/B,OAhBAC,qBAAU,WACctC,EAASwB,WAAWC,IAAI,cAEhCc,GAAG,SAAS,SAACC,GACrB,IAAMC,EAASD,EAASE,MAClBC,EAAa,GAInB,IAAI,IAAIX,KAAMS,EACVE,EAAWf,KAAX,aAAiBI,MAAOS,EAAOT,KAEnCK,EAAaM,QAElB,IAGC,6BACKP,EAAYA,EAAUQ,KAAI,SAAClB,EAAMmB,GAAP,OACvB,kBAAChB,EAAD,CAAMH,KAAMA,EAAMoB,IAAKD,OAExB,ICdAE,MAVf,WACE,OACE,yBAAKjB,UAAU,OACf,+CACC,kBAACpB,EAAD,MACA,kBAACyB,EAAD,QCEea,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9C,QAAQ8C,MAAMA,EAAMC,c","file":"static/js/main.232ae1b9.chunk.js","sourcesContent":["import firebase from 'firebase';\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyCxC0jFS4PlVGN4R_f17281uB2QWnlFoi8\",\r\n    authDomain: \"react-firebase-ba717.firebaseapp.com\",\r\n    databaseURL: \"https://react-firebase-ba717.firebaseio.com\",\r\n    projectId: \"react-firebase-ba717\",\r\n    storageBucket: \"react-firebase-ba717.appspot.com\",\r\n    messagingSenderId: \"556554080112\",\r\n    appId: \"1:556554080112:web:307743167e9158b954c9b5\",\r\n    measurementId: \"G-VH69FBBHWT\"\r\n  };\r\n  // Initialize Firebase\r\n  firebase.initializeApp(firebaseConfig);\r\n\r\n  export default firebase;","import React, { useState } from \"react\";\r\nimport firebase from './firebase';\r\n\r\nexport default function Form(){\r\n\r\n    const [title, setTitle] =  useState('');\r\n\r\n    const handleOnChange = (e) => {\r\n        setTitle(e.target.value);\r\n        console.log(e.target);\r\n    };\r\n\r\n    const addData = () => {\r\n        const firebaseRef = firebase.database().ref('TableTitle');\r\n        const todo = {\r\n            title: title,\r\n            completed: false\r\n            \r\n        };\r\n\r\n        firebaseRef.push(todo);\r\n\r\n        console.log(todo);\r\n    };\r\n\r\n    return(\r\n        <div>\r\n            <input type=\"text\" onChange={handleOnChange} value={title} \r\n            placeholder=\"Add title\"/>\r\n            <button onClick = {addData} >Add name</button>\r\n        </div>\r\n    );\r\n}","import React, {useState, useEffect} from 'react';\r\nimport './App.css';\r\nimport firebase from './firebase';\r\n\r\nexport default function Todo(todo){\r\n    console.log(todo.todo.completed);\r\n\r\n    const deleteTodo = () => {\r\n        const todoref = firebase.database().ref('TableTitle')\r\n        .child(todo.todo.id);\r\n\r\n        todoref.remove();\r\n\r\n    }\r\n\r\n    const updateTodo = () =>{\r\n        console.log(todo.todo.completed);\r\n        const todoref = firebase.database().ref('TableTitle')\r\n        .child(todo.todo.id);\r\n\r\n        todoref.update({\r\n            completed :  !todo.todo.completed,\r\n        });\r\n    }\r\n    return(\r\n        <div>\r\n            <h1 className={todo.todo.completed? \"complete\": \"\" }>{todo.todo.title}</h1>\r\n            <button onClick={deleteTodo}>delete</button>\r\n            <button onClick={updateTodo}>completed</button>\r\n        </div>\r\n    )\r\n}","import React, {useState, useEffect} from 'react';\r\nimport firebase from './firebase';\r\n\r\nimport Todo from './todo';\r\n\r\nexport default function TitleList(){\r\n    const [titleList, setTitleList]= useState();\r\n\r\n    useEffect(() => {\r\n        const firebaseRef = firebase.database().ref('TableTitle');\r\n\r\n        firebaseRef.on('value', (snapshot)=>{\r\n            const titles = snapshot.val();\r\n            const titleArray = [];\r\n\r\n            const tempdata = ``;\r\n\r\n            for(let id in titles){\r\n                titleArray.push({id, ...titles[id]});                \r\n            }\r\n            setTitleList(titleArray);\r\n        });\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            {titleList ? titleList.map((todo, index)=>\r\n                <Todo todo={todo} key={index}/>\r\n            \r\n            ) :''}\r\n        </div>\r\n    );\r\n}","import React from 'react';\nimport './App.css';\nimport Form from \"./form\"\nimport TitleList from './todoList';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <h1>React Fire base</h1>\n     <Form/>\n     <TitleList/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}